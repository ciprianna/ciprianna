---
layout: post
title: "Pair Programming"
date: 2015-07-23
categories: non-technical omaha-code-school
---
One thing that OCS emphasizes is the benefits of pair programming. The way we've practiced getting some experience with pair programming here is by partnering up with another student and working on one joint Github repository. The work is done on one person's computer at a time, and we switch who is programming every so often so that both partners gain some experience. We've been doing it for a few weeks now, and I'm gaining some more experince with this sort of "hive-mind" mentality to coding.

There are definitely some benefits I can see to this approach. I've partnered with four different people in the class so far.  I can say that it does make the workload seem far more manageable. Working in a pair also seems to reduce the amount of time it takes to complete a given project. The way it works, generally, is that one of us will plug our computer into a monitor that we can both see and work on it jointly. If either me or my partner has an idea, we have to verbalize what we're trying to do and why. That alone is a good exercise in thinking through the process of creating an application more thoroughly. Beyond that, with two minds working on the same project, it seems as if we can usually come up with something faster than if I were doing it purely in isolation. If I forget something, like, 'oh, what was that script tag again?', my partner might have remembered that. Then there are some things that stick in my brain that I remember and my partner might not. That aspect of it is a timesaver, for sure.

That said, there are some difficulties in pair programming. One of the hardest is to let go of all of my little conventions that I've been doing on my own. Something small, such as the way I name my files or variables, makes sense to me. Working in a pair though, I have to give some flexibility to the way I do things. That's been hard sometimes, to change the way I've been thinking about a given thing. At the same time, it exposes me to different ways of solving a problem. Just because I do something one way definitely does not make it right, or efficient. Hearing other solutions and other ways of thinking helps me to gain a greater knowledge of how to solve a problem, and that never hurts.

One thing I've noticed is that I work better with a partner if our way of thinking through a problem is similar. Some people I've worked with just don't have minds that click in the same way mine does. So for me, I have to take that extra amount of effort to understand how they walk through a problem and try to solve it. It's odd how some people's brains just think differently than my own about the same exact thing. Again, it's a good experience to hear things expressed in a different way, but there's definitely a learning curve involved where we have to learn to communicate in a way that both of us understand clearly to move forward. By contrast, when I've had partners who seem to think through problems the same way I do, it seems like the project just clicks and goes much more smoothly throughout.

Another major pain with pair programming is debugging! Yikes! Every project I've pair-programmed on, I've gotten stuck for some amount of time on one thing or another (that's all part of the process...right???). So, when we inevitably hit that point where something went wrong, I've noticed it can go one of two ways. The first is that it's something not too difficult to debug, and between the two of us, a solution is found relatively quick. The second, and more unfortunate way it can go, is if we are both out of ideas. That's tough. Especially when we're working on a joint project. Debugging seems to be very trial-and-error based (of course), and it's almost easier to just have the control to try things as you find them online. Then, there's having to deal with those moments when either I or my partner will suggest something that the other one of us knows won't work, but we politely allow it to be tested anyway. I've been on both sides of that. Most of the time, it's in the fog of the code and trying to figure out something (_anything!_) that works, and I suggest something that doesn't even make sense. It's easy to get caught in that space, and it's difficult to be there with another person.

My first thought was to cringe when Sumeet told us that we had to work with partners for a given project. I always have the feeling of, ugh, I hope we'll get along and hopefully think in a similar way. But, after working on a few pair-projects, I've overall never really regretted having to pair up. It's always been a generally good experience that I've gotten a lot out of. I always learn something different. Plus, there's the nice added benefit of being able to talk through those moments where I don't fully understand something. Moving beyond the small difficulties of working with someone else, pair programming has saved a lot of time and I've enjoyed it so far.
